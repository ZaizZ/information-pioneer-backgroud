server:
  port: 9001
spring:
  application:
    name: information-pioneer-media
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.181.132:3306/information_pioneer_media?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false
    username: root
    password: root
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.181.132:8848
  servlet:
    multipart:
      max-file-size: 10MB #调整上传文件的大小

  redis:
    host: 192.168.181.132
    redisson:
      config:
        clusterServersConfig:
          nodeAddresses:
            - "redis://192.168.181.132:6379"

  kafka:
    bootstrap-servers: 127.0.0.1:9092
    producer:
      retries: 0
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
mybatis-plus:
  configuration:
    # sql输出到控制台,方便开发调试
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

seata:
  registry:
    type: nacos
    nacos:
      server-addr: 192.168.181.132:8848
      group: DEFAULT_GROUP
      namespace: ""
      application: seata-server
      cluster: default
  tx-service-group: information-pioneer-media-group # 事务组，考虑到你这个微服务可能会有集群部署，所以定义在同一个事务组里面
  service:
    vgroup-mapping:
      information-pioneer-media-group: default   # 与上面想对应，属于哪个seata集群
  data-source-proxy-mode: AT #分布式事务的模式

minio:
  endpoint: http://192.168.181.132:9000
  accessKey: minio
  secretKey: minio123
  bucketName: pioneer  #minio中的桶

topic:
  upDownTopic: wm_news_up_down_topic



